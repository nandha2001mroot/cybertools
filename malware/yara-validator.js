document.addEventListener('DOMContentLoaded', function() {
    const yaraInput = document.getElementById('yaraInput');
    const validateYARA = document.getElementById('validateYARA');
    const clearAll = document.getElementById('clearAll');
    const validationErrors = document.getElementById('validationErrors');
    const ruleComponents = document.getElementById('ruleComponents');

    // Validate YARA
    validateYARA.addEventListener('click', function() {
        const input = yaraInput.value.trim();
        
        if (!input) {
            alert('Please enter YARA rule to validate.');
            return;
        }

        validateYARARule(input);
    });

    // Clear all
    clearAll.addEventListener('click', function() {
        yaraInput.value = '';
        clearResults();
    });

    // Validate YARA rule
    function validateYARARule(input) {
        // Display validation results (simulated)
        document.getElementById('syntaxValid').textContent = 'Validating...';
        document.getElementById('ruleName').textContent = 'Validating...';
        document.getElementById('conditions').textContent = 'Validating...';
        document.getElementById('stringsCount').textContent = 'Validating...';

        // Simulate validation process
        setTimeout(function() {
            // In a real implementation, you would validate the YARA rule syntax
            // For demonstration, we'll simulate results
            const isValid = Math.random() > 0.2; // 80% chance of valid rule
            const ruleName = extractRuleName(input);
            const conditions = countConditions(input);
            const strings = countStrings(input);

            document.getElementById('syntaxValid').textContent = isValid ? 'Yes' : 'No';
            document.getElementById('ruleName').textContent = ruleName || 'Unnamed Rule';
            document.getElementById('conditions').textContent = conditions;
            document.getElementById('stringsCount').textContent = strings;

            // Display rule analysis
            const complexity = assessComplexity(input);
            const falsePositives = assessFalsePositives(input);
            const performance = assessPerformance(input);

            document.getElementById('complexity').textContent = complexity;
            document.getElementById('falsePositives').textContent = falsePositives;
            document.getElementById('performance').textContent = performance;
            document.getElementById('recommendations').textContent = isValid ? 
                'Rule is valid, consider optimizing for performance' : 'Fix syntax errors';

            // Generate mock validation errors
            if (isValid) {
                validationErrors.textContent = 'No syntax errors found.';
            } else {
                validationErrors.textContent = `Error: Missing closing brace at line 10
Error: Undefined string reference $s3 at line 15
Error: Invalid condition syntax at line 12`;
            }

            // Generate mock rule components
            ruleComponents.innerHTML = '';
            const components = [
                { component: 'Meta Section', details: 'Author, description, date', status: 'Valid' },
                { component: 'Strings Section', details: '3 text strings, 2 hex strings', status: isValid ? 'Valid' : 'Invalid' },
                { component: 'Condition Section', details: 'Logical expression with AND/OR', status: isValid ? 'Valid' : 'Invalid' },
                { component: 'Imports', details: 'pe, hash, math', status: 'Valid' }
            ];

            components.forEach(comp => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${comp.component}</td>
                    <td>${comp.details}</td>
                    <td><span class="badge bg-${comp.status === 'Valid' ? 'success' : 'danger'}">${comp.status}</span></td>
                `;
                ruleComponents.appendChild(row);
            });
        }, 2000);
    }

    // Extract rule name
    function extractRuleName(input) {
        const match = input.match(/rule\s+([a-zA-Z0-9_]+)/);
        return match ? match[1] : null;
    }

    // Count conditions
    function countConditions(input) {
        const match = input.match(/condition:/i);
        return match ? 1 : 0;
    }

    // Count strings
    function countStrings(input) {
        const textStrings = (input.match(/\$[a-z]=/gi) || []).length;
        const hexStrings = (input.match(/\$[a-z]=\{/gi) || []).length;
        return textStrings + hexStrings;
    }

    // Assess complexity
    function assessComplexity(input) {
        const complexity = ['Low', 'Medium', 'High'];
        return complexity[Math.floor(Math.random() * complexity.length)];
    }

    // Assess false positives
    function assessFalsePositives(input) {
        const fp = ['Low', 'Medium', 'High'];
        return fp[Math.floor(Math.random() * fp.length)];
    }

    // Assess performance
    function assessPerformance(input) {
        const perf = ['Good', 'Fair', 'Poor'];
        return perf[Math.floor(Math.random() * perf.length)];
    }

    // Clear results
    function clearResults() {
        document.getElementById('syntaxValid').textContent = '-';
        document.getElementById('ruleName').textContent = '-';
        document.getElementById('conditions').textContent = '-';
        document.getElementById('stringsCount').textContent = '-';
        document.getElementById('complexity').textContent = '-';
        document.getElementById('falsePositives').textContent = '-';
        document.getElementById('performance').textContent = '-';
        document.getElementById('recommendations').textContent = '-';
        validationErrors.textContent = '';
        ruleComponents.innerHTML = '';
    }

    // Add Nandha's expertise insight
    function addNandhaInsight() {
        const insightCard = document.querySelector('.insight-item');
        if (insightCard) {
            insightCard.innerHTML += `
                <div class="mt-3">
                    <p class="small text-muted">
                        <i class="fas fa-user me-2"></i>
                        Expert insight by <a href="https://www.linkedin.com/in/nandha-kumar-m-952342159/" target="_blank">Nandha Kumar M</a>
                    </p>
                </div>
            `;
        }
    }

    // Initialize Nandha's insight
    addNandhaInsight();
});