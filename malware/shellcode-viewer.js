document.addEventListener('DOMContentLoaded', function() {
    const shellcodeInput = document.getElementById('shellcodeInput');
    const analyzeShellcode = document.getElementById('analyzeShellcode');
    const clearAll = document.getElementById('clearAll');
    const stringAnalysis = document.getElementById('stringAnalysis');

    // Analyze shellcode
    analyzeShellcode.addEventListener('click', function() {
        const input = shellcodeInput.value.trim();
        
        if (!input) {
            alert('Please enter shellcode to analyze.');
            return;
        }

        analyzeShellcodeContent(input);
    });

    // Clear all
    clearAll.addEventListener('click', function() {
        shellcodeInput.value = '';
        clearResults();
    });

    // Analyze shellcode content
    function analyzeShellcodeContent(input) {
        // Display analysis results (simulated)
        document.getElementById('shellcodeLength').textContent = 'Analyzing...';
        document.getElementById('formatDetected').textContent = 'Analyzing...';
        document.getElementById('architecture').textContent = 'Analyzing...';
        document.getElementById('entropy').textContent = 'Analyzing...';

        // Simulate analysis process
        setTimeout(function() {
            // In a real implementation, you would parse and analyze the shellcode
            // For demonstration, we'll simulate results
            const length = input.length;
            const format = detectFormat(input);
            const arch = detectArchitecture(input);
            const entropy = calculateEntropy(input);

            document.getElementById('shellcodeLength').textContent = length + ' bytes';
            document.getElementById('formatDetected').textContent = format;
            document.getElementById('architecture').textContent = arch;
            document.getElementById('entropy').textContent = entropy.toFixed(2);

            // Display security analysis
            document.getElementById('potentialFunctions').textContent = 'Network, File I/O, Process Creation';
            document.getElementById('suspiciousPatterns').textContent = 'Socket creation, Process injection';
            document.getElementById('securityLevel').textContent = 'Critical';
            document.getElementById('riskAssessment').textContent = 'Potentially malicious';

            // Generate mock disassembly
            const disassembly = generateMockDisassembly(format);
            document.getElementById('disassemblyOutput').textContent = disassembly;

            // Generate mock string analysis
            stringAnalysis.innerHTML = '';
            const strings = [
                { offset: '0x0010', string: 'cmd.exe', type: 'Executable' },
                { offset: '0x0025', string: 'socket', type: 'Network' },
                { offset: '0x003A', string: 'CreateProcess', type: 'API Call' }
            ];

            strings.forEach(str => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${str.offset}</td>
                    <td>${str.string}</td>
                    <td>${str.type}</td>
                `;
                stringAnalysis.appendChild(row);
            });
        }, 2000);
    }

    // Detect format
    function detectFormat(input) {
        if (input.startsWith('\\x')) return 'Hexadecimal';
        if (input.includes('unsigned char')) return 'C Array';
        if (input.includes('buf = b"')) return 'Python';
        if (input.includes('section .text')) return 'Assembly';
        return 'Unknown';
    }

    // Detect architecture
    function detectArchitecture(input) {
        // In a real implementation, you would analyze opcodes
        const architectures = ['x86', 'x64', 'ARM', 'MIPS'];
        return architectures[Math.floor(Math.random() * architectures.length)];
    }

    // Calculate entropy
    function calculateEntropy(input) {
        // Simplified entropy calculation for demonstration
        return Math.random() * 8; // 0-8 bits
    }

    // Generate mock disassembly
    function generateMockDisassembly(format) {
        return `; Disassembly of shellcode
00000000  90                nop
00000001  90                nop
00000002  90                nop
00000003  6A 00             push 0
00000005  68 63 6D 64 2E    push "cmd."
0000000A  68 2E 65 78 65    push ".exe"
0000000F  8B C4             mov eax, esp
00000011  50                push eax
00000012  B8 73 6F 63 6B    mov eax, "sock"
00000017  50                push eax
00000018  FF D0             call eax`;
    }

    // Clear results
    function clearResults() {
        document.getElementById('shellcodeLength').textContent = '-';
        document.getElementById('formatDetected').textContent = '-';
        document.getElementById('architecture').textContent = '-';
        document.getElementById('entropy').textContent = '-';
        document.getElementById('potentialFunctions').textContent = '-';
        document.getElementById('suspiciousPatterns').textContent = '-';
        document.getElementById('securityLevel').textContent = '-';
        document.getElementById('riskAssessment').textContent = '-';
        document.getElementById('disassemblyOutput').textContent = '';
        stringAnalysis.innerHTML = '';
    }

    // Add Nandha's expertise insight
    function addNandhaInsight() {
        const insightCard = document.querySelector('.insight-item');
        if (insightCard) {
            insightCard.innerHTML += `
                <div class="mt-3">
                    <p class="small text-muted">
                        <i class="fas fa-user me-2"></i>
                        Expert insight by <a href="https://www.linkedin.com/in/nandha-kumar-m-952342159/" target="_blank">Nandha Kumar M</a>
                    </p>
                </div>
            `;
        }
    }

    // Initialize Nandha's insight
    addNandhaInsight();
});