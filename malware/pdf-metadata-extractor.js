document.addEventListener('DOMContentLoaded', function() {
    const pdfFileUpload = document.getElementById('pdfFileUpload');
    const extractMetadata = document.getElementById('extractMetadata');
    const clearAll = document.getElementById('clearAll');
    const customMetadata = document.getElementById('customMetadata');
    const fontList = document.getElementById('fontList');

    // Extract metadata
    extractMetadata.addEventListener('click', function() {
        const file = pdfFileUpload.files[0];
        
        if (!file) {
            alert('Please upload a PDF file to extract metadata.');
            return;
        }

        extractPDFMetadata(file);
    });

    // Clear all
    clearAll.addEventListener('click', function() {
        pdfFileUpload.value = '';
        clearResults();
    });

    // Extract PDF metadata
    function extractPDFMetadata(file) {
        // Display file information
        document.getElementById('fileSize').textContent = formatFileSize(file.size);
        document.getElementById('pdfTitle').textContent = 'Extracting...';
        document.getElementById('pdfAuthor').textContent = 'Extracting...';
        document.getElementById('pdfSubject').textContent = 'Extracting...';

        // Simulate PDF metadata extraction
        setTimeout(function() {
            // In a real implementation, you would parse the PDF file
            // For demonstration, we'll simulate results
            const title = getRandomTitle();
            const author = getRandomAuthor();
            const subject = getRandomSubject();
            const creator = getRandomCreator();
            const producer = getRandomProducer();
            const creationDate = getRandomCreationDate();
            const modificationDate = getRandomModificationDate();
            const pages = getRandomPageCount();
            const version = getRandomPDFVersion();

            document.getElementById('pdfTitle').textContent = title;
            document.getElementById('pdfAuthor').textContent = author;
            document.getElementById('pdfSubject').textContent = subject;
            document.getElementById('pdfCreator').textContent = creator;
            document.getElementById('pdfProducer').textContent = producer;
            document.getElementById('creationDate').textContent = creationDate;
            document.getElementById('modificationDate').textContent = modificationDate;
            document.getElementById('pageCount').textContent = pages;
            document.getElementById('pdfVersion').textContent = version;

            // Display security analysis
            const encryption = getRandomEncryptionStatus();
            const permissions = getRandomPermissions();
            const embedded = getRandomEmbeddedFiles();
            const js = getRandomJavaScriptStatus();
            const suspicious = getSuspiciousElements(embedded, js);

            document.getElementById('encryptionStatus').textContent = encryption;
            document.getElementById('permissions').textContent = permissions;
            document.getElementById('embeddedFiles').textContent = embedded;
            document.getElementById('javascript').textContent = js;
            document.getElementById('suspiciousElements').textContent = suspicious;

            // Generate mock custom metadata
            customMetadata.innerHTML = '';
            const metadata = generateMockCustomMetadata();
            
            metadata.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${item.key}</td>
                    <td>${item.value}</td>
                `;
                customMetadata.appendChild(row);
            });

            // Generate mock font list
            fontList.innerHTML = '';
            const fonts = generateMockFontList();
            
            fonts.forEach(font => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${font.name}</td>
                    <td>${font.type}</td>
                    <td>${font.embedded ? 'Yes' : 'No'}</td>
                `;
                fontList.appendChild(row);
            });
        }, 2000);
    }

    // Format file size
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Get random title
    function getRandomTitle() {
        const titles = [
            'Annual Financial Report',
            'Project Proposal Document',
            'Research Paper on Cybersecurity',
            'Employee Handbook',
            'Technical Specification',
            'Meeting Minutes',
            'Contract Agreement'
        ];
        return titles[Math.floor(Math.random() * titles.length)];
    }

    // Get random author
    function getRandomAuthor() {
        const authors = [
            'John Smith',
            'Jane Doe',
            'Robert Johnson',
            'Emily Wilson',
            'Michael Brown',
            'Sarah Davis',
            'David Miller'
        ];
        return authors[Math.floor(Math.random() * authors.length)];
    }

    // Get random subject
    function getRandomSubject() {
        const subjects = [
            'Financial Analysis',
            'Business Strategy',
            'Technical Documentation',
            'Human Resources',
            'Research Findings',
            'Project Management',
            'Legal Compliance'
        ];
        return subjects[Math.floor(Math.random() * subjects.length)];
    }

    // Get random creator
    function getRandomCreator() {
        const creators = [
            'Microsoft Word',
            'Adobe Acrobat',
            'LibreOffice Writer',
            'Google Docs',
            'Apple Pages',
            'LaTeX',
            'OpenOffice Writer'
        ];
        return creators[Math.floor(Math.random() * creators.length)];
    }

    // Get random producer
    function getRandomProducer() {
        const producers = [
            'Acrobat Distiller',
            'Ghostscript',
            'PDFtk',
            'iText',
            'Apache PDFBox',
            'Poppler',
            'MuPDF'
        ];
        return producers[Math.floor(Math.random() * producers.length)];
    }

    // Get random creation date
    function getRandomCreationDate() {
        const now = new Date();
        const daysAgo = Math.floor(Math.random() * 365);
        const date = new Date(now.setDate(now.getDate() - daysAgo));
        return date.toISOString().split('T')[0];
    }

    // Get random modification date
    function getRandomModificationDate() {
        const now = new Date();
        const daysAgo = Math.floor(Math.random() * 30);
        const date = new Date(now.setDate(now.getDate() - daysAgo));
        return date.toISOString().split('T')[0];
    }

    // Get random page count
    function getRandomPageCount() {
        return Math.floor(Math.random() * 50) + 1; // 1-50 pages
    }

    // Get random PDF version
    function getRandomPDFVersion() {
        const versions = ['1.4', '1.5', '1.6', '1.7', '2.0'];
        return versions[Math.floor(Math.random() * versions.length)];
    }

    // Get random encryption status
    function getRandomEncryptionStatus() {
        const statuses = ['None', '128-bit AES', '256-bit AES', 'Standard Security Handler'];
        return statuses[Math.floor(Math.random() * statuses.length)];
    }

    // Get random permissions
    function getRandomPermissions() {
        const perms = ['Printing Allowed', 'Copying Allowed', 'Commenting Allowed', 'Form Filling Allowed'];
        const count = Math.floor(Math.random() * 3) + 1;
        const selected = [];
        for (let i = 0; i < count; i++) {
            const idx = Math.floor(Math.random() * perms.length);
            if (!selected.includes(perms[idx])) {
                selected.push(perms[idx]);
            }
        }
        return selected.join(', ');
    }

    // Get random embedded files
    function getRandomEmbeddedFiles() {
        const files = ['None', '1 attachment', '2 attachments', 'Image files', 'Data files'];
        return files[Math.floor(Math.random() * files.length)];
    }

    // Get random JavaScript status
    function getRandomJavaScriptStatus() {
        return Math.random() > 0.8 ? 'Present' : 'None';
    }

    // Get suspicious elements
    function getSuspiciousElements(embedded, js) {
        const elements = [];
        if (embedded !== 'None') elements.push('Embedded files');
        if (js === 'Present') elements.push('JavaScript');
        if (elements.length === 0) elements.push('None detected');
        return elements.join(', ');
    }

    // Generate mock custom metadata
    function generateMockCustomMetadata() {
        return [
            { key: 'Keywords', value: 'finance, report, annual' },
            { key: 'Company', value: 'TechCorp Inc.' },
            { key: 'Department', value: 'Finance' },
            { key: 'Classification', value: 'Confidential' },
            { key: 'ReviewedBy', value: 'Audit Committee' }
        ];
    }

    // Generate mock font list
    function generateMockFontList() {
        return [
            { name: 'Helvetica', type: 'TrueType', embedded: false },
            { name: 'Times-Roman', type: 'Type 1', embedded: true },
            { name: 'Courier', type: 'Type 1', embedded: false },
            { name: 'Arial', type: 'TrueType', embedded: true },
            { name: 'Calibri', type: 'OpenType', embedded: true }
        ];
    }

    // Clear results
    function clearResults() {
        document.getElementById('pdfTitle').textContent = '-';
        document.getElementById('pdfAuthor').textContent = '-';
        document.getElementById('pdfSubject').textContent = '-';
        document.getElementById('pdfCreator').textContent = '-';
        document.getElementById('pdfProducer').textContent = '-';
        document.getElementById('creationDate').textContent = '-';
        document.getElementById('modificationDate').textContent = '-';
        document.getElementById('pageCount').textContent = '-';
        document.getElementById('fileSize').textContent = '-';
        document.getElementById('pdfVersion').textContent = '-';
        document.getElementById('encryptionStatus').textContent = '-';
        document.getElementById('permissions').textContent = '-';
        document.getElementById('embeddedFiles').textContent = '-';
        document.getElementById('javascript').textContent = '-';
        document.getElementById('suspiciousElements').textContent = '-';
        customMetadata.innerHTML = '';
        fontList.innerHTML = '';
    }

    // Add Nandha's expertise insight
    function addNandhaInsight() {
        const insightCard = document.querySelector('.insight-item');
        if (insightCard) {
            insightCard.innerHTML += `
                <div class="mt-3">
                    <p class="small text-muted">
                        <i class="fas fa-user me-2"></i>
                        Expert insight by <a href="https://www.linkedin.com/in/nandha-kumar-m-952342159/" target="_blank">Nandha Kumar M</a>
                    </p>
                </div>
            `;
        }
    }

    // Initialize Nandha's insight
    addNandhaInsight();
});