document.addEventListener('DOMContentLoaded', function() {
    const fileUpload = document.getElementById('fileUpload');
    const hexInput = document.getElementById('hexInput');
    const identifyFile = document.getElementById('identifyFile');
    const clearAll = document.getElementById('clearAll');
    const signatureDetails = document.getElementById('signatureDetails');
    const relatedFiles = document.getElementById('relatedFiles');

    // Identify file
    identifyFile.addEventListener('click', function() {
        const file = fileUpload.files[0];
        const hex = hexInput.value.trim();
        
        if (!file && !hex) {
            alert('Please upload a file or enter hex signature.');
            return;
        }

        if (file) {
            identifyUploadedFile(file);
        } else {
            identifyHexSignature(hex);
        }
    });

    // Clear all
    clearAll.addEventListener('click', function() {
        fileUpload.value = '';
        hexInput.value = '';
        clearResults();
    });

    // Identify uploaded file
    function identifyUploadedFile(file) {
        // Display identification results (simulated)
        document.getElementById('fileType').textContent = 'Analyzing...';
        document.getElementById('magicBytes').textContent = 'Analyzing...';
        document.getElementById('fileExtension').textContent = 'Analyzing...';
        document.getElementById('confidence').textContent = 'Analyzing...';

        // Simulate file analysis
        setTimeout(function() {
            // In a real implementation, you would read the file and analyze magic bytes
            // For demonstration, we'll simulate results
            const fileType = getRandomFileType();
            const magicBytes = getRandomMagicBytes(fileType);
            const extension = getFileExtension(fileType);
            const confidence = (Math.random() * 0.3 + 0.7).toFixed(2); // 70-100%

            document.getElementById('fileType').textContent = fileType;
            document.getElementById('magicBytes').textContent = magicBytes;
            document.getElementById('fileExtension').textContent = extension;
            document.getElementById('confidence').textContent = (confidence * 100).toFixed(0) + '%';

            // Display security analysis
            const securityRisk = getSecurityRisk(fileType);
            const typicalUse = getTypicalUse(fileType);
            const malwarePotential = getMalwarePotential(fileType);

            document.getElementById('securityRisk').textContent = securityRisk;
            document.getElementById('typicalUse').textContent = typicalUse;
            document.getElementById('malwarePotential').textContent = malwarePotential;
            document.getElementById('recommendations').textContent = securityRisk === 'High' ? 
                'Analyze in sandbox environment' : 'Standard analysis procedures';

            // Generate mock signature details
            signatureDetails.innerHTML = '';
            const details = generateSignatureDetails(magicBytes);
            
            details.forEach(detail => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${detail.offset}</td>
                    <td>${detail.hex}</td>
                    <td>${detail.ascii}</td>
                    <td>${detail.description}</td>
                `;
                signatureDetails.appendChild(row);
            });

            // Generate mock related files
            relatedFiles.innerHTML = '';
            const related = getRelatedFileTypes(fileType);
            
            related.forEach(rel => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${rel.type}</td>
                    <td>${rel.extension}</td>
                    <td>${rel.magic}</td>
                    <td><span class="badge bg-${rel.risk === 'High' ? 'danger' : rel.risk === 'Medium' ? 'warning' : 'success'}">${rel.risk}</span></td>
                `;
                relatedFiles.appendChild(row);
            });
        }, 2000);
    }

    // Identify hex signature
    function identifyHexSignature(hex) {
        // Display identification results (simulated)
        document.getElementById('fileType').textContent = 'Analyzing...';
        document.getElementById('magicBytes').textContent = 'Analyzing...';
        document.getElementById('fileExtension').textContent = 'Analyzing...';
        document.getElementById('confidence').textContent = 'Analyzing...';

        // Simulate hex analysis
        setTimeout(function() {
            // In a real implementation, you would parse the hex and match signatures
            // For demonstration, we'll simulate results
            const fileType = getRandomFileType();
            const magicBytes = hex;
            const extension = getFileExtension(fileType);
            const confidence = (Math.random() * 0.3 + 0.7).toFixed(2); // 70-100%

            document.getElementById('fileType').textContent = fileType;
            document.getElementById('magicBytes').textContent = magicBytes;
            document.getElementById('fileExtension').textContent = extension;
            document.getElementById('confidence').textContent = (confidence * 100).toFixed(0) + '%';

            // Display security analysis
            const securityRisk = getSecurityRisk(fileType);
            const typicalUse = getTypicalUse(fileType);
            const malwarePotential = getMalwarePotential(fileType);

            document.getElementById('securityRisk').textContent = securityRisk;
            document.getElementById('typicalUse').textContent = typicalUse;
            document.getElementById('malwarePotential').textContent = malwarePotential;
            document.getElementById('recommendations').textContent = securityRisk === 'High' ? 
                'Analyze in sandbox environment' : 'Standard analysis procedures';

            // Generate mock signature details
            signatureDetails.innerHTML = '';
            const details = generateSignatureDetails(magicBytes);
            
            details.forEach(detail => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${detail.offset}</td>
                    <td>${detail.hex}</td>
                    <td>${detail.ascii}</td>
                    <td>${detail.description}</td>
                `;
                signatureDetails.appendChild(row);
            });

            // Generate mock related files
            relatedFiles.innerHTML = '';
            const related = getRelatedFileTypes(fileType);
            
            related.forEach(rel => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${rel.type}</td>
                    <td>${rel.extension}</td>
                    <td>${rel.magic}</td>
                    <td><span class="badge bg-${rel.risk === 'High' ? 'danger' : rel.risk === 'Medium' ? 'warning' : 'success'}">${rel.risk}</span></td>
                `;
                relatedFiles.appendChild(row);
            });
        }, 2000);
    }

    // Get random file type
    function getRandomFileType() {
        const types = [
            'Portable Network Graphics (PNG)',
            'JPEG Image',
            'PDF Document',
            'ZIP Archive',
            'Windows Executable (PE)',
            'Java Archive (JAR)',
            'Microsoft Word Document',
            'Rich Text Format (RTF)'
        ];
        return types[Math.floor(Math.random() * types.length)];
    }

    // Get magic bytes for file type
    function getRandomMagicBytes(type) {
        const signatures = {
            'Portable Network Graphics (PNG)': '89 50 4E 47 0D 0A 1A 0A',
            'JPEG Image': 'FF D8 FF E0',
            'PDF Document': '25 50 44 46 2D 31 2E',
            'ZIP Archive': '50 4B 03 04',
            'Windows Executable (PE)': '4D 5A',
            'Java Archive (JAR)': '50 4B 03 04',
            'Microsoft Word Document': 'D0 CF 11 E0 A1 B1 1A E1',
            'Rich Text Format (RTF)': '7B 5C 72 74 66 31'
        };
        return signatures[type] || 'Unknown';
    }

    // Get file extension
    function getFileExtension(type) {
        const extensions = {
            'Portable Network Graphics (PNG)': '.png',
            'JPEG Image': '.jpg',
            'PDF Document': '.pdf',
            'ZIP Archive': '.zip',
            'Windows Executable (PE)': '.exe',
            'Java Archive (JAR)': '.jar',
            'Microsoft Word Document': '.doc',
            'Rich Text Format (RTF)': '.rtf'
        };
        return extensions[type] || '.unknown';
    }

    // Get security risk
    function getSecurityRisk(type) {
        const risks = ['Low', 'Medium', 'High'];
        if (type.includes('Executable') || type.includes('Archive')) {
            return 'High';
        }
        return risks[Math.floor(Math.random() * risks.length)];
    }

    // Get typical use
    function getTypicalUse(type) {
        if (type.includes('Image')) return 'Graphics/Photos';
        if (type.includes('PDF')) return 'Document Sharing';
        if (type.includes('Executable')) return 'Software Installation';
        if (type.includes('Archive')) return 'File Compression';
        if (type.includes('Word') || type.includes('RTF')) return 'Document Editing';
        return 'General Purpose';
    }

    // Get malware potential
    function getMalwarePotential(type) {
        if (type.includes('Executable')) return 'High';
        if (type.includes('Archive')) return 'Medium';
        return 'Low';
    }

    // Generate signature details
    function generateSignatureDetails(magicBytes) {
        const bytes = magicBytes.split(' ');
        const details = [];
        
        for (let i = 0; i < Math.min(bytes.length, 4); i++) {
            const hex = bytes[i];
            const ascii = String.fromCharCode(parseInt(hex, 16));
            details.push({
                offset: '0x' + i.toString(16).padStart(2, '0'),
                hex: hex,
                ascii: ascii,
                description: getDescriptionForByte(hex, i)
            });
        }
        
        return details;
    }

    // Get description for byte
    function getDescriptionForByte(hex, offset) {
        const descriptions = {
            '89': 'PNG Magic Byte',
            '50': 'ZIP/PNG Start',
            '4E': 'PNG Signature',
            '47': 'PNG Signature',
            'FF': 'JPEG Start',
            'D8': 'JPEG SOI Marker',
            '25': 'PDF Start',
            '50': 'ZIP Local File Header',
            '4B': 'ZIP Signature',
            '4D': 'PE Executable Start',
            '5A': 'PE Executable Signature',
            'D0': 'DOC OLE Compound File',
            'CF': 'DOC Signature',
            '7B': 'RTF Start',
            '5C': 'RTF Backslash'
        };
        return descriptions[hex] || 'Unknown';
    }

    // Get related file types
    function getRelatedFileTypes(currentType) {
        const related = [
            { type: 'JPEG Image', extension: '.jpg', magic: 'FF D8 FF', risk: 'Low' },
            { type: 'GIF Image', extension: '.gif', magic: '47 49 46 38', risk: 'Low' },
            { type: 'Windows Executable', extension: '.exe', magic: '4D 5A', risk: 'High' },
            { type: 'Linux Executable', extension: '.elf', magic: '7F 45 4C 46', risk: 'High' }
        ];
        return related;
    }

    // Clear results
    function clearResults() {
        document.getElementById('fileType').textContent = '-';
        document.getElementById('magicBytes').textContent = '-';
        document.getElementById('fileExtension').textContent = '-';
        document.getElementById('confidence').textContent = '-';
        document.getElementById('securityRisk').textContent = '-';
        document.getElementById('typicalUse').textContent = '-';
        document.getElementById('malwarePotential').textContent = '-';
        document.getElementById('recommendations').textContent = '-';
        signatureDetails.innerHTML = '';
        relatedFiles.innerHTML = '';
    }

    // Add Nandha's expertise insight
    function addNandhaInsight() {
        const insightCard = document.querySelector('.insight-item');
        if (insightCard) {
            insightCard.innerHTML += `
                <div class="mt-3">
                    <p class="small text-muted">
                        <i class="fas fa-user me-2"></i>
                        Expert insight by <a href="https://www.linkedin.com/in/nandha-kumar-m-952342159/" target="_blank">Nandha Kumar M</a>
                    </p>
                </div>
            `;
        }
    }

    // Initialize Nandha's insight
    addNandhaInsight();
});