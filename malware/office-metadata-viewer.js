document.addEventListener('DOMContentLoaded', function() {
    const officeFileUpload = document.getElementById('officeFileUpload');
    const viewMetadata = document.getElementById('viewMetadata');
    const clearAll = document.getElementById('clearAll');
    const revisionHistory = document.getElementById('revisionHistory');
    const customProperties = document.getElementById('customProperties');

    // View metadata
    viewMetadata.addEventListener('click', function() {
        const file = officeFileUpload.files[0];
        
        if (!file) {
            alert('Please upload an Office document to view metadata.');
            return;
        }

        viewOfficeMetadata(file);
    });

    // Clear all
    clearAll.addEventListener('click', function() {
        officeFileUpload.value = '';
        clearResults();
    });

    // View Office metadata
    function viewOfficeMetadata(file) {
        // Display file information
        document.getElementById('docTitle').textContent = 'Analyzing...';
        document.getElementById('docSubject').textContent = 'Analyzing...';
        document.getElementById('docAuthor').textContent = 'Analyzing...';

        // Simulate Office metadata analysis
        setTimeout(function() {
            // In a real implementation, you would parse the Office document
            // For demonstration, we'll simulate results
            const title = getRandomTitle();
            const subject = getRandomSubject();
            const author = getRandomAuthor();
            const manager = getRandomManager();
            const company = getRandomCompany();
            const created = getRandomCreatedDate();
            const modified = getRandomModifiedDate();
            const pages = getRandomPageCount();
            const words = getRandomWordCount();
            const application = getRandomApplication();

            document.getElementById('docTitle').textContent = title;
            document.getElementById('docSubject').textContent = subject;
            document.getElementById('docAuthor').textContent = author;
            document.getElementById('docManager').textContent = manager;
            document.getElementById('docCompany').textContent = company;
            document.getElementById('createdDate').textContent = created;
            document.getElementById('modifiedDate').textContent = modified;
            document.getElementById('pageCount').textContent = pages;
            document.getElementById('wordCount').textContent = words;
            document.getElementById('application').textContent = application;

            // Display security analysis
            const password = getRandomPasswordStatus();
            const macros = getRandomMacroStatus();
            const embedded = getRandomEmbeddedObjects();
            const links = getRandomExternalLinks();
            const suspicious = getSuspiciousIndicators(macros, embedded, links);

            document.getElementById('passwordProtected').textContent = password;
            document.getElementById('macros').textContent = macros;
            document.getElementById('embeddedObjects').textContent = embedded;
            document.getElementById('externalLinks').textContent = links;
            document.getElementById('suspiciousIndicators').textContent = suspicious;

            // Generate mock revision history
            revisionHistory.innerHTML = '';
            const revisions = generateMockRevisionHistory();
            
            revisions.forEach(rev => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${rev.version}</td>
                    <td>${rev.date}</td>
                    <td>${rev.author}</td>
                    <td>${rev.comments}</td>
                `;
                revisionHistory.appendChild(row);
            });

            // Generate mock custom properties
            customProperties.innerHTML = '';
            const properties = generateMockCustomProperties();
            
            properties.forEach(prop => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${prop.property}</td>
                    <td>${prop.value}</td>
                `;
                customProperties.appendChild(row);
            });
        }, 2000);
    }

    // Get random title
    function getRandomTitle() {
        const titles = [
            'Quarterly Sales Report',
            'Project Plan Document',
            'Technical Specifications',
            'Employee Performance Review',
            'Budget Proposal',
            'Marketing Strategy',
            'Research Findings'
        ];
        return titles[Math.floor(Math.random() * titles.length)];
    }

    // Get random subject
    function getRandomSubject() {
        const subjects = [
            'Sales Analysis',
            'Project Management',
            'Technical Documentation',
            'Human Resources',
            'Financial Planning',
            'Marketing Campaign',
            'Research Data'
        ];
        return subjects[Math.floor(Math.random() * subjects.length)];
    }

    // Get random author
    function getRandomAuthor() {
        const authors = [
            'John Smith',
            'Jane Doe',
            'Robert Johnson',
            'Emily Wilson',
            'Michael Brown',
            'Sarah Davis',
            'David Miller'
        ];
        return authors[Math.floor(Math.random() * authors.length)];
    }

    // Get random manager
    function getRandomManager() {
        const managers = [
            'James Wilson',
            'Lisa Anderson',
            'Thomas Clark',
            'Jennifer Lee',
            'Christopher Taylor'
        ];
        return managers[Math.floor(Math.random() * managers.length)];
    }

    // Get random company
    function getRandomCompany() {
        const companies = [
            'TechCorp Inc.',
            'Global Solutions Ltd.',
            'Innovative Systems Co.',
            'Enterprise Dynamics Corp.',
            'Future Technologies LLC'
        ];
        return companies[Math.floor(Math.random() * companies.length)];
    }

    // Get random created date
    function getRandomCreatedDate() {
        const now = new Date();
        const daysAgo = Math.floor(Math.random() * 365);
        const date = new Date(now.setDate(now.getDate() - daysAgo));
        return date.toISOString().split('T')[0];
    }

    // Get random modified date
    function getRandomModifiedDate() {
        const now = new Date();
        const daysAgo = Math.floor(Math.random() * 30);
        const date = new Date(now.setDate(now.getDate() - daysAgo));
        return date.toISOString().split('T')[0];
    }

    // Get random page count
    function getRandomPageCount() {
        return Math.floor(Math.random() * 50) + 1; // 1-50 pages
    }

    // Get random word count
    function getRandomWordCount() {
        return Math.floor(Math.random() * 5000) + 500; // 500-5000 words
    }

    // Get random application
    function getRandomApplication() {
        const apps = [
            'Microsoft Word 2019',
            'Microsoft Excel 2016',
            'Microsoft PowerPoint 2019',
            'Google Docs',
            'LibreOffice Writer',
            'Apple Pages'
        ];
        return apps[Math.floor(Math.random() * apps.length)];
    }

    // Get random password status
    function getRandomPasswordStatus() {
        return Math.random() > 0.9 ? 'Yes' : 'No';
    }

    // Get random macro status
    function getRandomMacroStatus() {
        return Math.random() > 0.8 ? 'Present' : 'None';
    }

    // Get random embedded objects
    function getRandomEmbeddedObjects() {
        const objects = ['None', '1 object', '2 objects', 'Chart', 'Image'];
        return objects[Math.floor(Math.random() * objects.length)];
    }

    // Get random external links
    function getRandomExternalLinks() {
        const links = ['None', '1 link', '2 links', 'Hyperlinks present'];
        return links[Math.floor(Math.random() * links.length)];
    }

    // Get suspicious indicators
    function getSuspiciousIndicators(macros, embedded, links) {
        const indicators = [];
        if (macros === 'Present') indicators.push('Macros detected');
        if (embedded !== 'None') indicators.push('Embedded objects');
        if (links !== 'None') indicators.push('External links');
        if (indicators.length === 0) indicators.push('None detected');
        return indicators.join(', ');
    }

    // Generate mock revision history
    function generateMockRevisionHistory() {
        return [
            { version: '1.0', date: '2024-01-15', author: 'John Smith', comments: 'Initial draft' },
            { version: '1.1', date: '2024-01-20', author: 'Jane Doe', comments: 'Added financial data' },
            { version: '1.2', date: '2024-01-25', author: 'John Smith', comments: 'Revised projections' }
        ];
    }

    // Generate mock custom properties
    function generateMockCustomProperties() {
        return [
            { property: 'Category', value: 'Financial' },
            { property: 'Status', value: 'Final' },
            { property: 'Tags', value: 'sales, q1, 2024' },
            { property: 'Department', value: 'Finance' },
            { property: 'ReviewedBy', value: 'Audit Team' }
        ];
    }

    // Clear results
    function clearResults() {
        document.getElementById('docTitle').textContent = '-';
        document.getElementById('docSubject').textContent = '-';
        document.getElementById('docAuthor').textContent = '-';
        document.getElementById('docManager').textContent = '-';
        document.getElementById('docCompany').textContent = '-';
        document.getElementById('createdDate').textContent = '-';
        document.getElementById('modifiedDate').textContent = '-';
        document.getElementById('pageCount').textContent = '-';
        document.getElementById('wordCount').textContent = '-';
        document.getElementById('application').textContent = '-';
        document.getElementById('passwordProtected').textContent = '-';
        document.getElementById('macros').textContent = '-';
        document.getElementById('embeddedObjects').textContent = '-';
        document.getElementById('externalLinks').textContent = '-';
        document.getElementById('suspiciousIndicators').textContent = '-';
        revisionHistory.innerHTML = '';
        customProperties.innerHTML = '';
    }

    // Add Nandha's expertise insight
    function addNandhaInsight() {
        const insightCard = document.querySelector('.insight-item');
        if (insightCard) {
            insightCard.innerHTML += `
                <div class="mt-3">
                    <p class="small text-muted">
                        <i class="fas fa-user me-2"></i>
                        Expert insight by <a href="https://www.linkedin.com/in/nandha-kumar-m-952342159/" target="_blank">Nandha Kumar M</a>
                    </p>
                </div>
            `;
        }
    }

    // Initialize Nandha's insight
    addNandhaInsight();
});